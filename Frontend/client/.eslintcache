[{"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\index.js":"1","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Admin.js":"2","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Registration.js":"3","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Signup.js":"4","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\ChatOnline\\ChatOnline.js":"5","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\App.js":"6","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\UserProfile.js":"7","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Profile.js":"8","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Home.js":"9","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Reset.js":"10","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Messenger.js":"11","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Signin.js":"12","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\CreatePost.js":"13","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\VideoChat.js":"14","E:\\FinalYearProject\\Frontend\\client\\src\\index.js":"15","E:\\FinalYearProject\\Frontend\\client\\src\\components\\screens\\CreatePost.js":"16","E:\\FinalYearProject\\Frontend\\client\\src\\components\\screens\\Signin.js":"17","E:\\FinalYearProject\\Frontend\\client\\src\\components\\ChatOnline\\ChatOnline.js":"18"},{"size":500,"mtime":1624435744000,"results":"19","hashOfConfig":"20"},{"size":4419,"mtime":1624435744000,"results":"21","hashOfConfig":"20"},{"size":3818,"mtime":1624435744000,"results":"22","hashOfConfig":"20"},{"size":1566,"mtime":1624435744000,"results":"23","hashOfConfig":"20"},{"size":1492,"mtime":1624435744000,"results":"24","hashOfConfig":"20"},{"size":2987,"mtime":1624435744000,"results":"25","hashOfConfig":"20"},{"size":20208,"mtime":1624435744000,"results":"26","hashOfConfig":"20"},{"size":14195,"mtime":1624435744000,"results":"27","hashOfConfig":"20"},{"size":12987,"mtime":1624435744000,"results":"28","hashOfConfig":"20"},{"size":1603,"mtime":1624435744000,"results":"29","hashOfConfig":"20"},{"size":5806,"mtime":1625163716618,"results":"30","hashOfConfig":"20"},{"size":4409,"mtime":1624435744000,"results":"31","hashOfConfig":"20"},{"size":4254,"mtime":1625161249389,"results":"32","hashOfConfig":"20"},{"size":5237,"mtime":1625211243959,"results":"33","hashOfConfig":"20"},{"size":500,"mtime":1624435744000,"results":"34","hashOfConfig":"35"},{"size":4254,"mtime":1625161249389,"results":"36","hashOfConfig":"35"},{"size":4409,"mtime":1624435744000,"results":"37","hashOfConfig":"35"},{"size":1492,"mtime":1624435744000,"results":"38","hashOfConfig":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1oolj8f",{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"thigxj",{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\index.js",[],["84","85"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Admin.js",["86","87"],"import React,{useState,useContext} from 'react'\nimport {Link,useHistory} from 'react-router-dom'\nimport M from 'materialize-css'\nimport {UserContext} from '../../App'\nconst Admin=()=>{\n    const {state,dispatch}=useContext(UserContext)\n    const history=useHistory()\n    const [password,setPassword]=useState(\"\")\n    const [email,setEmail]=useState(\"\")\n    const [defaultEmail,setDefaultEmail]=useState(\"\")\n    const [isverified,setVerification]=useState(false)\n    const [otp,setOtp]=useState(\"\")\n    const [emailOTP,setEmailOTP]=useState(\"\")\n    const PostData=()=>{\n        if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email) && email!==\"\"){\n            M.toast({html: \"invalid email\",classes: \"#c62828 red darken-3\"})\n            return\n        }\n        fetch(\"/admin\",{\n            method: \"post\",\n            headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            body: JSON.stringify({\n                password,\n                email\n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n            if(data.error){\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n            }\n            else{\n                localStorage.setItem(\"jwt\",data.token)\n                localStorage.setItem(\"user\",JSON.stringify(data.user))\n                dispatch({type:\"USER\",payload:data.user})\n                M.toast({html:\"signed in successfully\",classes:\"#43a047 green darken-1\"})\n                history.push('/')\n            }\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const verifyDetails=()=>{\n        if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email) && email!==\"\"){\n            M.toast({html: \"invalid email\",classes: \"#c62828 red darken-3\"})\n            return\n        }\n        fetch('/getOtp',{\n            method: \"post\",\n            headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            body: JSON.stringify({\n               email: email \n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            //console.log(data)\n            if(data.error){\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n            }\n            else{\n                setEmailOTP(data.otp)\n                dispatch({type:\"USER\",payload:data.user})\n                M.toast({html:\"Please check your email\",classes:\"#43a047 green darken-1\"})\n            }\n        })\n    }\n\n    const verifyOTP=()=>{\n        if(emailOTP==otp){\n            setDefaultEmail(email)\n            console.log(email+\" \"+defaultEmail)\n            setVerification(true)\n            M.toast({html:\"OTP Verified\",classes:\"#43a047 green darken-1\"})\n        }\n        else{\n            M.toast({html: \"Wrong OTP\",classes:\"#c62828 red darken-3\"})\n        }\n    }\n\n    function preback(){ window.history.forward(); }\n    setTimeout(preback(),0);\n    window.onunload=null  \n\n\n    return (\n        <div className=\"mycard\">\n            <div className=\"card auth-card\">\n                <h2 style={{color: \"rgb(95,158,160)\"}}>Explore</h2>\n                <input type=\"text\" placeholder=\"email\" value={!isverified?email:defaultEmail} onChange={(e)=>setEmail(e.target.value)}/>\n                <button class=\"btn waves-effect waves-light\" onClick={verifyDetails}>Get OTP</button>\n                <input type=\"text\" placeholder=\"Enter OTP\" value={otp} onChange={(e)=>setOtp(e.target.value)} />\n                <button class=\"btn waves-effect waves-light\" onClick={verifyOTP}>Verify OTP</button>\n                <input type=\"password\" placeholder=\"password\" value={isverified?password:\"\"} onChange={(e)=>setPassword(e.target.value)}/>\n                <button class=\"btn waves-effect waves-light\" onClick={PostData}>\n                     Admin Login\n                </button>\n                <p>\n                     <Link to='/signup'><p style={{color: \"rgb(72,72,72)\"}}>Don't have an account?</p></Link>\n                </p>\n                <p>\n                     <Link to='/signin'><p style={{color: \"rgb(72,72,72)\"}}>Sign in as user?</p></Link>\n                </p>\n                <p>\n                    <Link to='/reset'><p style={{color: \"rgb(72,72,72)\"}}>Forgot Password?</p></Link>\n                </p>\n            </div>\n        </div>\n    )\n}\n\n export default Admin","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Registration.js",["88","89"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Signup.js",["90","91","92"],"import React,{useState,useContext} from 'react'\nimport {Link,useHistory} from 'react-router-dom'\nimport M from 'materialize-css'\nconst Reset=()=>{\n    const history=useHistory()\n    const [email,setEmail]=useState(\"\")\n    const PostData=()=>{\n        if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email) && email!==\"\"){\n            M.toast({html: \"invalid email\",classes: \"#c62828 red darken-3\"})\n            return\n        }\n        fetch(\"/verify\",{\n            method: \"post\",\n            headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            body: JSON.stringify({\n                email\n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            \n            if(data.error){\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n            }\n            else{\n                M.toast({html:data.message,classes:\"#43a047 green darken-1\"})\n                // history.push('/signin')\n            }\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n    return (\n        <div className=\"mycard\">\n            <div className=\"card auth-card\">\n                <h2 style={{color: \"rgb(95,158,160)\"}}>Explore</h2>\n                <input type=\"text\" placeholder=\"email\" value={email} onChange={(e)=>setEmail(e.target.value)}/>\n                <button class=\"btn waves-effect waves-light\" onClick={PostData}>\n                    Verify Email\n                </button>\n            </div>\n        </div>\n    )\n}\n\n export default Reset",["93","94"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\ChatOnline\\ChatOnline.js",["95"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\App.js",["96"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\UserProfile.js",["97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"import React,{useEffect,useState,useContext} from 'react'\nimport {UserContext} from '../../App'\nimport {useParams,useHistory} from 'react-router-dom'\nimport axios from 'axios'\n\nconst Profile=()=>{\n    const [userProfile,setProfile]=useState(null)\n    const {state,dispatch}=useContext(UserContext)\n    const {userid}=useParams()\n    const history=useHistory()\n    console.log(\"state in user profile becomes \"+JSON.stringify(state))\n    //const [showFollowers,setShowFollowers]=useState(true)\n    // console.log(userProfile)\n    if(!state){\n        function preback(){ window.history.forward(); }\n        setTimeout(preback(),0);\n        window.onunload=null  \n    }\n    useEffect(()=>{\n        fetch(`/user/${userid}`,{\n            headers:{\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            }\n        }).then(res=>res.json())\n        .then(result=>{\n            setProfile(result)\n            // console.log(\"result=\"+JSON.stringify(result))\n        })\n    },[])\n\n    const likePost=(id)=>{\n        fetch('/like',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            //result means the updated post\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setProfile(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n    const unlikePost=(id)=>{\n        fetch('/unlike',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            // console.log(\"result: \"+JSON.stringify(result))\n            // console.log(\"item: \"+JSON.stringify(data[0]))\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setProfile(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const loveReact=(id)=>{\n        fetch('/fav',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            //result means the updated post\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setProfile(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const removeLoveReact=(id)=>{\n        fetch('/removefav',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            // console.log(\"result: \"+JSON.stringify(result))\n            // console.log(\"item: \"+JSON.stringify(data[0]))\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setProfile(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const reporting=(id)=>{\n        fetch('/report',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            //result means the updated post\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setProfile(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const withdrawing=(id)=>{\n        fetch('/rmvreport',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            // console.log(\"result: \"+JSON.stringify(result))\n            // console.log(\"item: \"+JSON.stringify(data[0]))\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setProfile(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const makeComment=(text,postId)=>{\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n                text\n            })\n        })\n        .then(res=>res.json())\n        .then(result=>{\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            setProfile(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const deletepost=(postid)=>{\n        fetch('/deletepost/'+postid,{\n            method: \"delete\",\n            headers: {\n                Authorization: \"token \"+localStorage.getItem(\"jwt\")\n            }\n        }).then(res=>res.json())\n        .then(result=>{\n            const newdata={user:userProfile.user,posts:{}}\n            newdata.posts=userProfile.posts.filter(item=>{\n                return item._id!=result._id\n            })\n            setProfile(newdata)\n        })\n    }\n\n    const followUser=()=>{\n        fetch('/follow',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem('jwt')\n            },\n            body:JSON.stringify({\n                followId:userid\n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n            dispatch({type:\"UPDATE\",payload:data})\n            localStorage.setItem(\"user\",JSON.stringify(data))\n            setProfile((prevstate)=>{\n                // console.log(\"hi\")\n                // console.log(prevstate)\n                // console.log(data)\n                // console.log(\"hello\")\n                return {\n                    ...prevstate,\n                    user:{\n                        ...prevstate.user,\n                        followers:[...prevstate.user.followers,data._id]\n                    }\n                }\n            })\n            //setShowFollowers(false)\n        })\n    }\n\n    const unfollowUser=()=>{\n        fetch('/unfollow',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem('jwt')\n            },\n            body:JSON.stringify({\n                unfollowId:userid\n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n            dispatch({type:\"UPDATE\",payload:data})\n            localStorage.setItem(\"user\",JSON.stringify(data))\n            setProfile((prevstate)=>{\n                // console.log(\"hi\")\n                // console.log(prevstate)\n                // console.log(data)\n                // console.log(\"hello\")\n                const newfollower=prevstate.user.followers.filter((item)=>{\n                    // console.log(\"item=\"+item)\n                    // console.log(\"item._id=\"+item._id)//id of any random follower in the followers array\n                    // console.log(\"data=\"+JSON.stringify(data))\n                    // console.log(\"data._id=\"+data._id)//id of logged in user.\n                    return item != data._id//means we are selecting all the followers from the followers array except the logged in follower.\n                })\n                return {\n                    ...prevstate,\n                    user:{\n                        ...prevstate.user,\n                        followers:newfollower\n                    }\n                }\n            })\n            //setShowFollowers(true)\n        })\n    }\n\n    const openConversation = async ()=>{\n        try{\n        const res= await axios.get(\"/conversations/\"+state._id)\n        \n        //console.log(res.data[0].members)\n\n        let i=0;\n        let status=0;\n\n        for(i=0;i<res.data.length;i++)\n        {\n            const friend= res.data[i].members.find((m)=>m!==state._id)\n            console.log(friend)\n            console.log(userProfile)\n            if(friend === userProfile.user._id)\n            {\n                status=1\n                history.push('/messenger')\n                break;\n            }\n           \n        }\n        if(status==0){\n            console.log(\"Conversation not found!\")\n            fetch('/conversations',{\n                method:\"post\",\n                headers:{\n                    \"Content-Type\":\"application/json\"\n                    //\"Authorization\":\"token \"+localStorage.getItem('jwt')\n                },\n                body:JSON.stringify({\n                    senderId:state._id,\n                    receiverId:userProfile.user._id\n                })\n            }).then(res=>{\n                console.log(res.json())\n                history.push('/messenger')\n            })\n        }\n        \n       \n        }\n        catch(err)\n        {\n            console.log(err)\n        }\n    }\n\n    const [currentPost,setCurrentPost]=useState(\"\")\n    //console.log(\"state=\"+JSON.stringify(state))\n    return (\n        <>\n        {!userProfile?\"\"\n        :\n        <div style={{\n            maxWidth: \"550px\", margin: \"0px auto\"\n        }}>\n            <div style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                margin: \"18px 0px\",\n                borderBottom: \"1px solid grey\"\n            }}>\n                <div>\n                    <img style={{width: \"160px\", height: \"160px\", borderRadius: \"80px\"}}\n                    src={userProfile?userProfile.user.pic:\"Loading\"}\n                    />\n                </div>\n                <div>\n                    <h4>{userProfile.user.name}</h4>\n                    <h6>{userProfile.user.email}</h6>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\", width:\"108%\"}}>\n                        <h6>{userProfile.posts.length} posts</h6>\n                        <h6>{userProfile.user.followers.length} followers</h6>\n                        <h6>{userProfile.user.following.length} followings</h6>\n                    </div>\n                    <div style={{display: \"flex\", paddingBottom:\"10px\", justifyContent:\"space-between\"}}>\n                        {\n                            !state.following.includes(userProfile.user._id)\n                            ?\n                            <button class=\"btn waves-effect waves-light\" onClick={()=>followUser()}>\n                                Follow\n                            </button>\n                            :\n                            <button class=\"btn waves-effect waves-light\" onClick={()=>unfollowUser()}>\n                                Unfollow\n                            </button>\n                        }\n                        <button className=\"btn waves-effect waves-light\"\n                            onClick={openConversation}>\n                            Message\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"gallery\">\n                {\n                    userProfile.posts.map((item)=>{\n                        return (\n                            <div>\n                                <div key={item._id} className=\"card profile-card\">\n                                    <h5\n                                    style={{color:\"grey\",fontFamily:'cursive',paddingLeft:'20px',paddingTop:'10px'}}>\n                                    Posted by {item.postedBy.name}\n                                    {/*item.postedBy._id refers to the post id and state._id refers to the user id*/}\n                                    {(item.postedBy._id==state._id || (state.isadmin && item.reports.length>0)) \n                                    && <i className=\"material-icons\" style={{float:\"right\",cursor:\"pointer\"}}\n                                    onClick={()=>{deletepost(item._id)}}\n                                    >delete</i>}\n                                    </h5>\n                                    <div className=\"card-content\">\n                                        <h6>{item.title}</h6>\n                                        <p>{item.body}</p>\n                                    </div>\n                                    <div className=\"card-image card-content\">\n                                        <img key={item._id} src={item.photo}/>\n                                    </div>\n                                    <div className=\"card-content\">\n                                        {\n                                            item.favourite.includes(state._id)\n                                            ?\n                                            <i className=\"material-icons\" style={{color: \"red\",cursor:\"pointer\"}} onClick={()=>{removeLoveReact(item._id)}}>favorite</i>\n                                            :\n                                            <i className=\"material-icons\" style={{color: \"red\",cursor:\"pointer\"}} onClick={()=>{loveReact(item._id)}}>favorite_border</i>\n                                        }\n                                        <span>{item.favourite.length}    </span>\n                                        {\n                                            item.likes.includes(state._id)\n                                            ?\n                                            <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{unlikePost(item._id)}}>thumb_up</i>\n                                            :\n                                            <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{likePost(item._id)}}>thumb_up_off_alt</i>\n                                        }\n                                        <span>{item.likes.length}</span>\n                                        {\n                                            !(state.isadmin||(item.postedBy._id==state._id))\n                                            ?\n                                            item.reports.includes(state._id)\n                                            ?\n                                            <button className=\"btn btn-primary\" style={{float:\"right\"}} onClick={()=>{withdrawing(item._id)}}>Reported</button>\n                                            :\n                                            <button className=\"btn btn-primary\" style={{float:\"right\"}} onClick={()=>{reporting(item._id)}}>Report</button>\n                                            :\n                                            \"\"\n                                        }\n                                        <br></br>\n                                        {\n                                            state.isadmin\n                                            ?\n                                            <p>reported {item.reports.length} times</p>\n                                            :\n                                            \"\"\n                                        }\n                                        {\n                                            (item._id==currentPost) \n                                            ?\n                                            item.comments.map(record=>{\n                                                return (\n                                                    <h6 key={record._id}><span style={{fontWeight:\"700\"}}>{record.postedBy.name} </span>{record.text}</h6>\n                                                )\n                                            })\n                                            :\n                                            <p style={{fontWeight:\"300\"}}>Click on show below to check comments..</p>\n                                        }\n                                        <form onSubmit={(e)=>{\n                                            e.preventDefault()\n                                            makeComment(e.target[0].value,item._id)\n                                            e.target[0].value=\"\"//I added this line\n                                        }}>\n                                            <input type=\"text\" placeholder=\"Add a comment\"/>\n                                            {\n                                                (item._id==currentPost)\n                                                ?\n                                                <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(\"\")}}>Hide</button>\n                                                :\n                                                <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(item._id)}}>Show</button>\n                                            }\n                                    \n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n                \n            </div>\n        </div>\n        }\n\n        </>\n    )\n}\n\nexport default Profile","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Profile.js",["114","115","116","117","118","119","120","121","122","123","124","125"],"import React,{useEffect,useState,useContext} from 'react'\nimport {UserContext} from '../../App'\n\nconst Profile=()=>{\n    const [mypics,setpics]=useState([])\n    const {state,dispatch}=useContext(UserContext)\n    const [image,setImage]=useState(undefined)\n    // const [url,setUrl]=useState(\"\")\n    // console.log(\"state in profile becomes: \"+JSON.stringify(state))\n    // console.log(\"image in profile becomes: \"+JSON.stringify(image))\n    // console.log(mypics)\n    if(!state){\n        function preback(){ window.history.forward(); }\n        setTimeout(preback(),0);\n        window.onunload=null  \n    }\n    useEffect(()=>{\n        fetch('/myposts',{\n            headers:{\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            }\n        }).then(res=>res.json())\n        .then(result=>{\n            //console.log(\"Result===>>>>\"+JSON.stringify(result))\n            // console.log(\"Use Effect 1 runs\")\n            setpics(result.myposts)\n        })\n    },[])\n\n    useEffect(()=>{\n        if(image){\n            console.log(\"Use Effect 2 runs\")\n            const data=new FormData()\n            data.append(\"file\",image)\n            data.append(\"upload_preset\",\"explore-app\")\n            data.append(\"cloud_name\",\"codersneverquit\")\n            fetch(\"https://api.cloudinary.com/v1_1/codersneverquit/image/upload\",{\n                method: \"post\",\n                body: data\n            })\n            .then(res=>res.json())\n            .then(data=>{\n                // setUrl(data.url)\n                // localStorage.setItem(\"user\",JSON.stringify({...state,pic:data.url}))\n                // dispatch({type:\"UPDATEPIC\",payload:data.url})\n                console.log(\"inner fetch method runs\")\n                fetch('/updatepic',{\n                    method:\"put\",\n                    headers:{\n                        \"Content-Type\":\"application/json\",\n                        \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n                    },\n                    body:JSON.stringify({\n                        pic:data.url\n                    })\n                }).then(res=>res.json())\n                .then(result=>{\n                    localStorage.setItem(\"user\",JSON.stringify({...state,pic:data.url}))\n                    window.location.reload()//Not necessary to that extent.\n                    dispatch({type:\"UPDATEPIC\",payload:result.pic})\n                })\n            })\n            .catch(err=>{\n                console.log(err)\n            })\n        }\n    },[image])\n\n    const updatePhoto=(file)=>{\n        setImage(file)\n    }\n\n    const likePost=(id)=>{\n        fetch('/like',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            //result means the updated post\n            const newdata=mypics.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setpics(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n    const unlikePost=(id)=>{\n        fetch('/unlike',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            // console.log(\"result: \"+JSON.stringify(result))\n            // console.log(\"item: \"+JSON.stringify(data[0]))\n            const newdata=mypics.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setpics(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const loveReact=(id)=>{\n        fetch('/fav',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            //result means the updated post\n            const newdata=mypics.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setpics(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const removeLoveReact=(id)=>{\n        fetch('/removefav',{\n            method: \"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId:id\n            })\n        }).then(res=>res.json())\n        .then(result=>{\n            // console.log(\"result: \"+JSON.stringify(result))\n            // console.log(\"item: \"+JSON.stringify(data[0]))\n            const newdata=mypics.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\n            setpics(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const makeComment=(text,postId)=>{\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n                text\n            })\n        })\n        .then(res=>res.json())\n        .then(result=>{\n            // console.log(result)\n            const newdata=mypics.map(item=>{\n                if(item._id==result._id){\n                    return result\n                }\n                else{\n                    return item\n                }\n            })\n            setpics(newdata)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const deletepost=(postid)=>{\n        fetch('/deletepost/'+postid,{\n            method: \"delete\",\n            headers: {\n                Authorization: \"token \"+localStorage.getItem(\"jwt\")\n            }\n        }).then(res=>res.json())\n        .then(result=>{\n            // console.log(result)//Printing the deleted post in the console.\n            const newData=mypics.filter(item=>{\n                return item._id!=result._id\n            })\n            setpics(newData)\n        })\n    }\n    const [currentPost,setCurrentPost]=useState(\"\")\n    const foo=()=>{\n        console.log(\"JSX is rendering\")\n    }\n    return (\n        <>\n        {!state?<h1>{foo()}</h1>\n        :\n        <div style={{\n            maxWidth: \"550px\", margin: \"0px auto\"\n        }}>\n            <div style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                margin: \"18px 0px\",\n                borderBottom: \"1px solid grey\"\n            }}>\n                <div>\n                    <img style={{width: \"160px\", height: \"160px\", borderRadius: \"80px\"}}\n                    src={state?state.pic:\"loading\"}\n                    />\n                    <div>\n                    <div className=\"file-field input-field\" style={{margin:\"10px\"}}>\n                        <div className=\"btn waves-effect waves-light\">\n                            <span>Update Profile Pic</span>\n                            <input type=\"file\" \n                            onChange={(event)=>updatePhoto(event.target.files[0])}\n                            />\n                        </div>\n                        <div className=\"file-path-wrapper\">\n                            <input className=\"file-path validate\" type=\"text\" />\n                        </div>\n                    </div>\n                    </div>\n                </div>\n                <div>\n                    <h4>{state?state.name:\"loading...\"}</h4>\n                    <h6>{state?state.email:\"loading...\"}</h6>\n                    <div style={{display: \"flex\", justifyContent: \"space-between\", width:\"108%\"}}>\n                        <h6>{mypics.length} posts</h6>\n                        <h6>{state?state.followers.length:\"Loading...\"} followers</h6>\n                        <h6>{state?state.following.length:\"Loading...\"} followings</h6>\n                    </div>\n                </div>\n            </div>\n            <div className=\"gallery\">\n                {\n                    mypics.map((item)=>{\n                        return (\n                            <div>\n                                <div key={item._id} className=\"card profile-card\">\n                                    <h5\n                                    style={{color:\"grey\",fontFamily:'cursive',paddingLeft:'20px',paddingTop:'10px'}}>\n                                    Posted by {item.postedBy.name}\n                                    {/*item.postedBy._id refers to the post id and state._id refers to the user id*/}\n                                    {item.postedBy._id==state._id \n                                    && <i className=\"material-icons\" style={{float:\"right\",cursor:\"pointer\"}}\n                                    onClick={()=>{deletepost(item._id)}}\n                                    >delete</i>}\n                                    </h5>\n                                    <div className=\"card-content\">\n                                        <h6>{item.title}</h6>\n                                        <p>{item.body}</p>\n                                    </div>\n                                    <div className=\"card-image card-content\">\n                                        <img key={item._id} src={item.photo}/>\n                                    </div>\n                                    <div className=\"card-content\">\n                                        {\n                                            item.favourite.includes(state._id)\n                                            ?\n                                            <i className=\"material-icons\" style={{color: \"red\",cursor:\"pointer\"}} onClick={()=>{removeLoveReact(item._id)}}>favorite</i>\n                                            :\n                                            <i className=\"material-icons\" style={{color: \"red\",cursor:\"pointer\"}} onClick={()=>{loveReact(item._id)}}>favorite_border</i>\n                                        }\n                                        <span>{item.favourite.length}    </span>\n                                        {\n                                            item.likes.includes(state._id)\n                                            ?\n                                            <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{unlikePost(item._id)}}>thumb_up</i>\n                                            :\n                                            <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{likePost(item._id)}}>thumb_up_off_alt</i>\n                                        }\n                                        <span>{item.likes.length}</span>\n                                        {\n                                            (item._id==currentPost) \n                                            ?\n                                            item.comments.map(record=>{\n                                                return (\n                                                    <h6 key={record._id}><span style={{fontWeight:\"700\"}}>{record.postedBy.name} </span>{record.text}</h6>\n                                                )\n                                            })\n                                            :\n                                            <p style={{fontWeight:\"300\"}}>Click on show below to check comments..</p>\n                                        }\n                                        <form onSubmit={(e)=>{\n                                            e.preventDefault()\n                                            makeComment(e.target[0].value,item._id)\n                                            e.target[0].value=\"\"//I added this line\n                                        }}>\n                                            <input type=\"text\" placeholder=\"Add a comment\"/>\n                                            {\n                                                (item._id==currentPost)\n                                                ?\n                                                <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(\"\")}}>Hide</button>\n                                                :\n                                                <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(item._id)}}>Show</button>\n                                            }\n                                    \n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n                \n            </div>\n        </div>\n        }\n        </>\n    )\n}\n\nexport default Profile","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Home.js",["126","127","128","129","130","131","132","133","134","135","136","137","138","139","140"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Reset.js",["141","142","143"],"import React,{useState,useContext} from 'react'\nimport {Link,useHistory} from 'react-router-dom'\nimport M from 'materialize-css'\nconst Reset=()=>{\n    const history=useHistory()\n    const [email,setEmail]=useState(\"\")\n    const PostData=()=>{\n        if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email) && email!==\"\"){\n            M.toast({html: \"invalid email\",classes: \"#c62828 red darken-3\"})\n            return\n        }\n        fetch(\"/reset-password\",{\n            method: \"post\",\n            headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            body: JSON.stringify({\n                email\n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            \n            if(data.error){\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n            }\n            else{\n                M.toast({html:data.message,classes:\"#43a047 green darken-1\"})\n                //history.push('/signin')\n            }\n        })\n        .catch(err=>{\n            console.log(\"hello world soham sarkar \"+err)\n        })\n    }\n    return (\n        <div className=\"mycard\">\n            <div className=\"card auth-card\">\n                <h2 style={{color: \"rgb(95,158,160)\"}}>Explore</h2>\n                <input type=\"text\" placeholder=\"email\" value={email} onChange={(e)=>setEmail(e.target.value)}/>\n                <button class=\"btn waves-effect waves-light\" onClick={PostData}>\n                    Reset Password\n                </button>\n            </div>\n        </div>\n    )\n}\n\n export default Reset",["144","145"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Messenger.js",["146"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\Signin.js",["147","148"],"import React,{useState,useContext} from 'react'\nimport {Link,useHistory} from 'react-router-dom'\nimport M from 'materialize-css'\nimport {UserContext} from '../../App'\nconst Signin=()=>{\n    const {state,dispatch}=useContext(UserContext)\n    const history=useHistory()\n    const [password,setPassword]=useState(\"\")\n    const [email,setEmail]=useState(\"\")\n    const [defaultEmail,setDefaultEmail]=useState(\"\")\n    const [isverified,setVerification]=useState(false)\n    const [otp,setOtp]=useState(\"\")\n    const [emailOTP,setEmailOTP]=useState(\"\")\n    const PostData=()=>{\n        if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email) && email!==\"\"){\n            M.toast({html: \"invalid email\",classes: \"#c62828 red darken-3\"})\n            return\n        }\n        fetch(\"/signin\",{\n            method: \"post\",\n            headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            body: JSON.stringify({\n                password,\n                email\n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n            if(data.error){\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n            }\n            else{\n                localStorage.setItem(\"jwt\",data.token)\n                localStorage.setItem(\"user\",JSON.stringify(data.user))\n                dispatch({type:\"USER\",payload:data.user})\n                M.toast({html:\"signed in successfully\",classes:\"#43a047 green darken-1\"})\n                history.push('/')\n            }\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    const verifyDetails=()=>{\n        if(!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email) && email!==\"\"){\n            M.toast({html: \"invalid email\",classes: \"#c62828 red darken-3\"})\n            return\n        }\n        fetch('/getOtp',{\n            method: \"post\",\n            headers: {\n                \"Content-Type\":\"application/json\"\n            },\n            body: JSON.stringify({\n               email: email \n            })\n        }).then(res=>res.json())\n        .then(data=>{\n            //console.log(data)\n            if(data.error){\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\n            }\n            else{\n                setEmailOTP(data.otp)\n                dispatch({type:\"USER\",payload:data.user})\n                M.toast({html:\"Please check your email\",classes:\"#43a047 green darken-1\"})\n            }\n        })\n    }\n\n    const verifyOTP=()=>{\n        if(emailOTP==otp){\n            setDefaultEmail(email)\n            console.log(email+\" \"+defaultEmail)\n            setVerification(true)\n            M.toast({html:\"OTP Verified\",classes:\"#43a047 green darken-1\"})\n        }\n        else{\n            M.toast({html: \"Wrong OTP\",classes:\"#c62828 red darken-3\"})\n        }\n    }\n\n    function preback(){ window.history.forward(); }\n    setTimeout(preback(),0);\n    window.onunload=null\n\n    return (\n        <div className=\"mycard\">\n            <div className=\"card auth-card\">\n                <h2 style={{color: \"rgb(95,158,160)\"}}>Explore</h2>\n                <input type=\"text\" placeholder=\"email\" value={!isverified?email:defaultEmail} onChange={(e)=>setEmail(e.target.value)}/>\n                <button class=\"btn waves-effect waves-light\" onClick={verifyDetails}>Get OTP</button>\n                <input type=\"text\" placeholder=\"Enter OTP\" value={otp} onChange={(e)=>setOtp(e.target.value)} />\n                <button class=\"btn waves-effect waves-light\" onClick={verifyOTP}>Verify OTP</button>\n                <input type=\"password\" placeholder=\"password\" value={isverified?password:\"\"} onChange={(e)=>setPassword(e.target.value)}/>\n                <button class=\"btn waves-effect waves-light\" onClick={PostData}>\n                    Login\n                </button>\n                <p>\n                    <Link to='/signup'><p style={{color: \"rgb(72,72,72)\"}}>Don't have an account?</p></Link>\n                </p>\n                <p>\n                    <Link to='/admin'><p style={{color: \"rgb(72,72,72)\"}}>Log in as admin?</p></Link>\n                </p>\n                <p>\n                    <Link to='/reset'><p style={{color: \"rgb(72,72,72)\"}}>Forgot Password?</p></Link>\n                </p>\n            </div>\n        </div>\n    )\n}\n\n export default Signin","E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\CreatePost.js",["149","150","151"],"E:\\Chat_VideoChat_6746--master\\Frontend\\client\\src\\components\\screens\\VideoChat.js",["152","153","154","155"],"E:\\FinalYearProject\\Frontend\\client\\src\\index.js",[],"E:\\FinalYearProject\\Frontend\\client\\src\\components\\screens\\CreatePost.js",["156","157","158"],"E:\\FinalYearProject\\Frontend\\client\\src\\components\\screens\\Signin.js",["159","160"],"E:\\FinalYearProject\\Frontend\\client\\src\\components\\ChatOnline\\ChatOnline.js",["161"],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":6,"column":12,"nodeType":"168","messageId":"169","endLine":6,"endColumn":17},{"ruleId":"170","severity":1,"message":"171","line":75,"column":20,"nodeType":"172","messageId":"173","endLine":75,"endColumn":22},{"ruleId":"174","severity":1,"message":"175","line":17,"column":7,"nodeType":"176","endLine":17,"endColumn":12,"suggestions":"177"},{"ruleId":"170","severity":1,"message":"178","line":43,"column":104,"nodeType":"172","messageId":"173","endLine":43,"endColumn":106},{"ruleId":"166","severity":1,"message":"179","line":1,"column":24,"nodeType":"168","messageId":"169","endLine":1,"endColumn":34},{"ruleId":"166","severity":1,"message":"180","line":2,"column":9,"nodeType":"168","messageId":"169","endLine":2,"endColumn":13},{"ruleId":"166","severity":1,"message":"181","line":5,"column":11,"nodeType":"168","messageId":"169","endLine":5,"endColumn":18},{"ruleId":"162","replacedBy":"182"},{"ruleId":"164","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":36,"column":21,"nodeType":"186","endLine":36,"endColumn":25},{"ruleId":"174","severity":1,"message":"187","line":40,"column":5,"nodeType":"176","endLine":40,"endColumn":7,"suggestions":"188"},{"ruleId":"174","severity":1,"message":"189","line":29,"column":7,"nodeType":"176","endLine":29,"endColumn":9,"suggestions":"190"},{"ruleId":"170","severity":1,"message":"171","line":46,"column":28,"nodeType":"172","messageId":"173","endLine":46,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":76,"column":28,"nodeType":"172","messageId":"173","endLine":76,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":106,"column":28,"nodeType":"172","messageId":"173","endLine":106,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":137,"column":28,"nodeType":"172","messageId":"173","endLine":137,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":167,"column":28,"nodeType":"172","messageId":"173","endLine":167,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":198,"column":28,"nodeType":"172","messageId":"173","endLine":198,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":229,"column":28,"nodeType":"172","messageId":"173","endLine":229,"endColumn":30},{"ruleId":"170","severity":1,"message":"178","line":253,"column":32,"nodeType":"172","messageId":"173","endLine":253,"endColumn":34},{"ruleId":"170","severity":1,"message":"178","line":316,"column":33,"nodeType":"172","messageId":"173","endLine":316,"endColumn":35},{"ruleId":"170","severity":1,"message":"171","line":352,"column":18,"nodeType":"172","messageId":"173","endLine":352,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":394,"column":21,"nodeType":"186","endLine":396,"endColumn":23},{"ruleId":"170","severity":1,"message":"171","line":435,"column":56,"nodeType":"172","messageId":"173","endLine":435,"endColumn":58},{"ruleId":"191","severity":1,"message":"192","line":445,"column":41,"nodeType":"186","endLine":445,"endColumn":79},{"ruleId":"170","severity":1,"message":"171","line":465,"column":80,"nodeType":"172","messageId":"173","endLine":465,"endColumn":82},{"ruleId":"170","severity":1,"message":"171","line":484,"column":54,"nodeType":"172","messageId":"173","endLine":484,"endColumn":56},{"ruleId":"170","severity":1,"message":"171","line":501,"column":58,"nodeType":"172","messageId":"173","endLine":501,"endColumn":60},{"ruleId":"174","severity":1,"message":"193","line":67,"column":7,"nodeType":"176","endLine":67,"endColumn":14,"suggestions":"194"},{"ruleId":"170","severity":1,"message":"171","line":87,"column":28,"nodeType":"172","messageId":"173","endLine":87,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":116,"column":28,"nodeType":"172","messageId":"173","endLine":116,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":145,"column":28,"nodeType":"172","messageId":"173","endLine":145,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":175,"column":28,"nodeType":"172","messageId":"173","endLine":175,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":206,"column":28,"nodeType":"172","messageId":"173","endLine":206,"endColumn":30},{"ruleId":"170","severity":1,"message":"178","line":230,"column":32,"nodeType":"172","messageId":"173","endLine":230,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":253,"column":21,"nodeType":"186","endLine":255,"endColumn":23},{"ruleId":"170","severity":1,"message":"171","line":290,"column":55,"nodeType":"172","messageId":"173","endLine":290,"endColumn":57},{"ruleId":"191","severity":1,"message":"192","line":300,"column":41,"nodeType":"186","endLine":300,"endColumn":79},{"ruleId":"170","severity":1,"message":"171","line":320,"column":54,"nodeType":"172","messageId":"173","endLine":320,"endColumn":56},{"ruleId":"170","severity":1,"message":"171","line":337,"column":58,"nodeType":"172","messageId":"173","endLine":337,"endColumn":60},{"ruleId":"166","severity":1,"message":"195","line":7,"column":18,"nodeType":"168","messageId":"169","endLine":7,"endColumn":26},{"ruleId":"170","severity":1,"message":"171","line":39,"column":28,"nodeType":"172","messageId":"173","endLine":39,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":68,"column":28,"nodeType":"172","messageId":"173","endLine":68,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":97,"column":28,"nodeType":"172","messageId":"173","endLine":97,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":125,"column":28,"nodeType":"172","messageId":"173","endLine":125,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":154,"column":28,"nodeType":"172","messageId":"173","endLine":154,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":184,"column":28,"nodeType":"172","messageId":"173","endLine":184,"endColumn":30},{"ruleId":"170","severity":1,"message":"171","line":215,"column":28,"nodeType":"172","messageId":"173","endLine":215,"endColumn":30},{"ruleId":"170","severity":1,"message":"178","line":239,"column":32,"nodeType":"172","messageId":"173","endLine":239,"endColumn":34},{"ruleId":"170","severity":1,"message":"178","line":260,"column":55,"nodeType":"172","messageId":"173","endLine":260,"endColumn":57},{"ruleId":"170","severity":1,"message":"171","line":264,"column":52,"nodeType":"172","messageId":"173","endLine":264,"endColumn":54},{"ruleId":"191","severity":1,"message":"192","line":275,"column":33,"nodeType":"186","endLine":275,"endColumn":71},{"ruleId":"170","severity":1,"message":"171","line":295,"column":72,"nodeType":"172","messageId":"173","endLine":295,"endColumn":74},{"ruleId":"170","severity":1,"message":"171","line":314,"column":46,"nodeType":"172","messageId":"173","endLine":314,"endColumn":48},{"ruleId":"170","severity":1,"message":"171","line":331,"column":50,"nodeType":"172","messageId":"173","endLine":331,"endColumn":52},{"ruleId":"166","severity":1,"message":"179","line":1,"column":24,"nodeType":"168","messageId":"169","endLine":1,"endColumn":34},{"ruleId":"166","severity":1,"message":"180","line":2,"column":9,"nodeType":"168","messageId":"169","endLine":2,"endColumn":13},{"ruleId":"166","severity":1,"message":"181","line":5,"column":11,"nodeType":"168","messageId":"169","endLine":5,"endColumn":18},{"ruleId":"162","replacedBy":"196"},{"ruleId":"164","replacedBy":"197"},{"ruleId":"166","severity":1,"message":"195","line":19,"column":18,"nodeType":"168","messageId":"169","endLine":19,"endColumn":26},{"ruleId":"166","severity":1,"message":"167","line":6,"column":12,"nodeType":"168","messageId":"169","endLine":6,"endColumn":17},{"ruleId":"170","severity":1,"message":"171","line":75,"column":20,"nodeType":"172","messageId":"173","endLine":75,"endColumn":22},{"ruleId":"166","severity":1,"message":"195","line":11,"column":18,"nodeType":"168","messageId":"169","endLine":11,"endColumn":26},{"ruleId":"170","severity":1,"message":"171","line":20,"column":15,"nodeType":"172","messageId":"173","endLine":20,"endColumn":17},{"ruleId":"174","severity":1,"message":"198","line":74,"column":7,"nodeType":"176","endLine":74,"endColumn":12,"suggestions":"199"},{"ruleId":"166","severity":1,"message":"200","line":29,"column":9,"nodeType":"168","messageId":"169","endLine":29,"endColumn":21},{"ruleId":"166","severity":1,"message":"201","line":29,"column":22,"nodeType":"168","messageId":"169","endLine":29,"endColumn":37},{"ruleId":"166","severity":1,"message":"167","line":30,"column":9,"nodeType":"168","messageId":"169","endLine":30,"endColumn":14},{"ruleId":"166","severity":1,"message":"195","line":30,"column":15,"nodeType":"168","messageId":"169","endLine":30,"endColumn":23},{"ruleId":"166","severity":1,"message":"195","line":11,"column":18,"nodeType":"168","messageId":"169","endLine":11,"endColumn":26},{"ruleId":"170","severity":1,"message":"171","line":20,"column":15,"nodeType":"172","messageId":"173","endLine":20,"endColumn":17},{"ruleId":"174","severity":1,"message":"198","line":74,"column":7,"nodeType":"176","endLine":74,"endColumn":12,"suggestions":"202"},{"ruleId":"166","severity":1,"message":"167","line":6,"column":12,"nodeType":"168","messageId":"169","endLine":6,"endColumn":17},{"ruleId":"170","severity":1,"message":"171","line":75,"column":20,"nodeType":"172","messageId":"173","endLine":75,"endColumn":22},{"ruleId":"184","severity":1,"message":"185","line":36,"column":21,"nodeType":"186","endLine":36,"endColumn":25},"no-native-reassign",["203"],"no-negated-in-lhs",["204"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'UploadFields'. Either include it or remove the dependency array.","ArrayExpression",["205"],"Expected '!==' and instead saw '!='.","'useContext' is defined but never used.","'Link' is defined but never used.","'history' is assigned a value but never used.",["203"],["204"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'state'. Either include them or remove the dependency array.",["206"],"React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["207"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.",["208"],"'dispatch' is assigned a value but never used.",["203"],["204"],"React Hook useEffect has missing dependencies: 'body', 'history', and 'title'. Either include them or remove the dependency array.",["209"],"'reloadStatus' is assigned a value but never used.","'setReloadStatus' is assigned a value but never used.",["210"],"no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"219","fix":"221"},"Update the dependencies array to be: [UploadFields, url]",{"range":"222","text":"223"},"Update the dependencies array to be: [dispatch, history, state]",{"range":"224","text":"225"},"Update the dependencies array to be: [userid]",{"range":"226","text":"227"},"Update the dependencies array to be: [dispatch, image, state]",{"range":"228","text":"229"},"Update the dependencies array to be: [body, history, title, url]",{"range":"230","text":"231"},{"range":"232","text":"231"},[523,528],"[UploadFields, url]",[1574,1576],"[dispatch, history, state]",[991,993],"[userid]",[2511,2518],"[dispatch, image, state]",[2404,2409],"[body, history, title, url]",[2404,2409]]